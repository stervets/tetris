// Generated by CoffeeScript 2.7.0
(function() {
  Application.Class.Sound = (function() {
    class Sound extends Backbone.Collection {
      play(file) {
        var sound;
        if (this.soundEnabled) {
          sound = this.buffer[this.index];
          sound.src = file;
          sound.load();
          sound.volume = 1;
          sound.play();
          if (++this.index >= AUDIO_BUFFER_SIZE) {
            return this.index = 0;
          }
        }
      }

      musicPlay() {
        if (this.musicEnabled) {
          this.musicPaused = false;
          this.music.load();
          return this.music.play();
        }
      }

      musicStop() {
        this.music.pause();
        return this.musicPaused = true;
      }

      switchAudio(type, value) {
        if (type) {
          return this.soundEnabled = value;
        } else {
          this.musicEnabled = value;
          if (value) {
            if (!this.musicPaused) {
              return this.music.play();
            }
          } else {
            return this.music.pause();
          }
        }
      }

      initialize() {
        var i, index, key, len, ref, ref1, results, sound, val;
        if (window.Audio == null) {
          return;
        }
        this.music = new Audio(RES.AUDIO.GAME_MUSIC);
        this.music.volume = 1;
        this.music.load();
        this.music.addEventListener('ended', function() {
          this.currentTime = 0;
          return this.play();
        }, false);
        ref = RES.AUDIO;
        for (key in ref) {
          val = ref[key];
          sound = new Audio(val);
          sound.load();
        }
        ref1 = this.buffer;
        results = [];
        for (i = 0, len = ref1.length; i < len; i++) {
          index = ref1[i];
          this.buffer[index] = new Audio();
          this.buffer[index].pause();
          results.push(this.buffer[index].startTime = 0);
        }
        return results;
      }

    };

    Sound.prototype.buffer = (function() {
      var results = [];
      for (var i = 0; 0 <= AUDIO_BUFFER_SIZE ? i < AUDIO_BUFFER_SIZE : i > AUDIO_BUFFER_SIZE; 0 <= AUDIO_BUFFER_SIZE ? i++ : i--){ results.push(i); }
      return results;
    }).apply(this);

    Sound.prototype.index = 0;

    Sound.prototype.model = Application.Model.Sound;

    Sound.prototype.music = null;

    Sound.prototype.soundEnabled = true;

    Sound.prototype.musicEnabled = true;

    Sound.prototype.musicPaused = false;

    return Sound;

  }).call(this);

}).call(this);

//# sourceMappingURL=audio.js.map
