// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Application.Model.Sound = (function(_super) {
    __extends(Sound, _super);

    function Sound() {
      return Sound.__super__.constructor.apply(this, arguments);
    }

    return Sound;

  })(Backbone.Model);

  Application.Collection.Sound = (function(_super) {
    var _i, _results;

    __extends(Sound, _super);

    function Sound() {
      return Sound.__super__.constructor.apply(this, arguments);
    }

    Sound.prototype.buffer = (function() {
      _results = [];
      for (var _i = 0; 0 <= AUDIO_BUFFER_SIZE ? _i < AUDIO_BUFFER_SIZE : _i > AUDIO_BUFFER_SIZE; 0 <= AUDIO_BUFFER_SIZE ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this);

    Sound.prototype.index = 0;

    Sound.prototype.model = Application.Model.Sound;

    Sound.prototype.music = null;

    Sound.prototype.soundEnabled = true;

    Sound.prototype.musicEnabled = true;

    Sound.prototype.musicPaused = false;

    Sound.prototype.play = function(file) {
      var sound;
      if (this.soundEnabled) {
        sound = this.buffer[this.index];
        sound.src = file;
        sound.load();
        sound.volume = 1;
        sound.play();
        if (++this.index >= AUDIO_BUFFER_SIZE) {
          return this.index = 0;
        }
      }
    };

    Sound.prototype.musicPlay = function() {
      if (this.musicEnabled) {
        this.musicPaused = false;
        this.music.load();
        return this.music.play();
      }
    };

    Sound.prototype.musicStop = function() {
      this.music.pause();
      return this.musicPaused = true;
    };

    Sound.prototype.switchAudio = function(type, value) {
      if (type) {
        return this.soundEnabled = value;
      } else {
        this.musicEnabled = value;
        if (value) {
          if (!this.musicPaused) {
            return this.music.play();
          }
        } else {
          return this.music.pause();
        }
      }
    };

    Sound.prototype.initialize = function() {
      var index, key, sound, val, _j, _len, _ref, _ref1, _results1;
      if (window.Audio == null) {
        return;
      }
      this.music = new Audio(RES.AUDIO.GAME_MUSIC);
      this.music.volume = 1;
      this.music.load();
      this.music.addEventListener('ended', function() {
        this.currentTime = 0;
        return this.play();
      }, false);
      _ref = RES.AUDIO;
      for (key in _ref) {
        val = _ref[key];
        sound = new Audio(val);
        sound.load();
      }
      _ref1 = this.buffer;
      _results1 = [];
      for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
        index = _ref1[_j];
        this.buffer[index] = new Audio();
        this.buffer[index].pause();
        _results1.push(this.buffer[index].startTime = 0);
      }
      return _results1;
    };

    return Sound;

  })(Backbone.Collection);

}).call(this);

//# sourceMappingURL=audio.map
