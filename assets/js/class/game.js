// Generated by CoffeeScript 1.7.1
(function() {
  var STATUS,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Application.Model.Player = (function(_super) {
    __extends(Player, _super);

    function Player() {
      return Player.__super__.constructor.apply(this, arguments);
    }

    Player.prototype.defaults = {
      name: 'PLayer',
      rating: 0
    };

    return Player;

  })(Backbone.Model);

  STATUS = {
    LOBBY: 0,
    GAME: 1
  };

  Application.Model.Game = (function(_super) {
    __extends(Game, _super);

    function Game() {
      return Game.__super__.constructor.apply(this, arguments);
    }

    Game.prototype.defaults = {
      status: STATUS.LOBBY
    };

    Game.prototype.gameReset = function() {
      Application.Pool.reset();
      Application.Controller.reset();
      Application.shapeStack.reset();
      return console.log('game reseted');
    };

    Game.prototype.handler = {
      menuShow: function() {
        return this.gameReset();
      }
    };

    Game.prototype.init = function() {
      return this.trigger('menuShow');
    };

    return Game;

  })(Backbone.Model);

  Application.View.Game = (function(_super) {
    __extends(Game, _super);

    function Game() {
      return Game.__super__.constructor.apply(this, arguments);
    }

    Game.prototype.node = '#jsGame';

    Game.prototype.modelHandler = {
      change: function() {},
      menuShow: function() {}
    };

    Game.prototype.init = function() {
      return this.$el.html('asdadss');
    };

    return Game;

  })(Backbone.View);


  /*
  
      controller = new Application.Model.Controller.User()
  
       *controller = new Application.Model.Controller.AI
       *    formula: 3
  
      Application.Controller.add(controller)
  
      pool = new Application.Model.Pool
          controller: controller.id
  
      Application.Pool.add(pool)
  
      if INIT_TEST_VIEW
          view = new Application.View.Pool
              x: 0
              y: 50
              model: pool
          $('body').append view.$el
  
  
      controller2 = new Application.Model.Controller.AI
          formula: 2
  
      Application.Controller.add(controller2)
  
      pool2 = new Application.Model.Pool
          controller: controller2.id
  
      Application.Pool.add(pool2)
  
      if INIT_TEST_VIEW
          view2 = new Application.View.Pool
              x: 430
              y: 50
              model: pool2
          $('body').append view2.$el
  
  
  
      controller3 = new Application.Model.Controller.AI
          formula: 6
  
      Application.Controller.add(controller3)
  
      pool3 = new Application.Model.Pool
          controller: controller3.id
  
      Application.Pool.add(pool3)
  
      if INIT_TEST_VIEW
          view3 = new Application.View.Pool
              x: 860
              y: 50
              model: pool3
          $('body').append view3.$el
   */

}).call(this);

//# sourceMappingURL=game.map
