// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Application.Model.Player = (function(_super) {
    __extends(Player, _super);

    function Player() {
      return Player.__super__.constructor.apply(this, arguments);
    }

    Player.prototype.defaults = {
      name: 'PLayer',
      rating: 0
    };

    return Player;

  })(Backbone.Model);

  Application.Model.Game = (function(_super) {
    __extends(Game, _super);

    function Game() {
      return Game.__super__.constructor.apply(this, arguments);
    }

    Game.prototype.defaults = {
      mode: null
    };

    Game.prototype.proc = {};

    Game.prototype.gameReset = function() {
      this.proc = {};
      Application.Pool.reset();
      Application.Controller.reset();
      return Application.shapeStack.reset();
    };

    Game.prototype.gameStart = function() {

      /*
      controller = new Application.Model.Controller.User()
       *controller = new Application.Model.Controller.AI
       *    formula: 2
      Application.Controller.add(controller)
      
      pool = new Application.Model.Pool
          controller: controller.id
      
      Application.Pool.add(pool)
      
      if INIT_TEST_VIEW
          view = new Application.View.Pool
              x: 0
              y: 50
              model: pool
          $('body').append view.$el
      
      
       *controller = new Application.Model.Controller.User()
      controller2 = new Application.Model.Controller.AI
          formula: 2
      Application.Controller.add(controller2)
      
      pool2 = new Application.Model.Pool
          controller: controller2.id
      
      Application.Pool.add(pool2)
      
      if INIT_TEST_VIEW
          view2 = new Application.View.Pool
              x: 450
              y: 50
              model: pool2
          $('body').append view2.$el
       */
    };

    Game.prototype["switch"] = function(mode) {
      if (this.attributes.mode === mode) {
        return this.trigger('change:mode', this, mode);
      } else {
        return this.set('mode', mode);
      }
    };

    Game.prototype.mode = [
      function() {}, function() {
        this.gameReset();
        console.log('reseted');
        this.proc.controller = new Application.Model.Controller.User();
        Application.Controller.add(this.proc.controller);
        console.log(Application.Controller.length);
        this.proc.pool = new Application.Model.Pool({
          controller: this.proc.controller.id
        });
        Application.Pool.add(this.proc.pool);
        return console.log(Application.Pool.length);
      }
    ];

    Game.prototype.handler = {
      'change:mode': function(model, mode) {
        if (this.mode[mode] != null) {
          return this.mode[mode].apply(this);
        }
      },
      showLobby: function() {},
      singlePlayer: function() {}
    };

    Game.prototype.init = function() {};

    return Game;

  })(Backbone.Model);

  Application.View.Game = (function(_super) {
    __extends(Game, _super);

    function Game() {
      return Game.__super__.constructor.apply(this, arguments);
    }

    Game.prototype.node = '#jsGame';

    Game.prototype.mode = [
      function() {}, function() {
        this.model.proc.view = new Application.View.Pool({
          x: 900 / 2 - 450 / 2,
          y: 50,
          model: this.model.proc.pool
        });
        this.$('#jsSinglePlay').html(this.model.proc.view.$el);
        this.model.proc.onGameOver = (function(_this) {
          return function() {
            _this.$('#jsSinglePlayGameOver .jsScore').text(_this.model.proc.pool.lines);
            return _this.$('#jsSinglePlayGameOver').css({
              opacity: 0,
              scale: 0
            }).show().transition({
              opacity: 1,
              scale: 1
            }, VIEW_ANIMATE_TIME);
          };
        })(this);
        return this.listenTo(this.model.proc.pool, 'gameover', this.model.proc.onGameOver);

        /*
        if INIT_TEST_VIEW
            view = new Application.View.Pool
                x: 0
                y: 50
                model: pool
            $('body').append view.$el
         */
      }
    ];

    Game.prototype.modelHandler = {
      change: function() {},
      'change:mode': function(model, mode) {
        var $gameInner, delay;
        if (this.mode[mode] != null) {
          delay = this.$('.game-inner:visible').length ? VIEW_ANIMATE_TIME : 0;
        }
        $gameInner = this.$('.game-inner');
        return $gameInner.transition({
          opacity: 0
        }, _.once((function(_this) {
          return function() {
            _this.$('.game-inner').hide();
            _this.mode[mode].apply(_this);
            return $($gameInner[mode]).css({
              opacity: 0
            }).show().transition({
              opacity: 1
            }, delay);
          };
        })(this), delay));
      },
      menuShow: function() {},
      singlePlayer: function() {
        return console.log(2);
      }
    };

    Game.prototype.init = function() {
      return this.$('#jsSinglePlayGameOver .jsPlayAgain').click(function() {
        Application.Game.gameReset();
        return Application.Game["switch"](GAME_MODE.SINGLE_PLAYER);
      });
    };

    return Game;

  })(Backbone.View);


  /*
  
      controller = new Application.Model.Controller.User()
  
       *controller = new Application.Model.Controller.AI
       *    formula: 3
  
      Application.Controller.add(controller)
  
      pool = new Application.Model.Pool
          controller: controller.id
  
      Application.Pool.add(pool)
  
      if INIT_TEST_VIEW
          view = new Application.View.Pool
              x: 0
              y: 50
              model: pool
          $('body').append view.$el
  
  
      controller2 = new Application.Model.Controller.AI
          formula: 2
  
      Application.Controller.add(controller2)
  
      pool2 = new Application.Model.Pool
          controller: controller2.id
  
      Application.Pool.add(pool2)
  
      if INIT_TEST_VIEW
          view2 = new Application.View.Pool
              x: 430
              y: 50
              model: pool2
          $('body').append view2.$el
  
  
  
      controller3 = new Application.Model.Controller.AI
          formula: 6
  
      Application.Controller.add(controller3)
  
      pool3 = new Application.Model.Pool
          controller: controller3.id
  
      Application.Pool.add(pool3)
  
      if INIT_TEST_VIEW
          view3 = new Application.View.Pool
              x: 860
              y: 50
              model: pool3
          $('body').append view3.$el
   */

}).call(this);

//# sourceMappingURL=game.map
