// Generated by CoffeeScript 2.7.0
(function() {
  var ref, ref1,
    boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

  Application.Collection.Controller = class Controller extends Backbone.Collection {};

  /* User keyboard control */
  ref = Application.Model.Controller.User = (function() {
    class User extends Backbone.Model {
      constructor() {
        super(...arguments);
        this.nextMove = this.nextMove.bind(this);
      }

      setKey(key, action) {
        Application.keyMapper(this, key, action);
        return this.attributes.keys[key] = action;
      }

      setKeys(keys) {
        var i, key, len, results;
        if (!_.isArray(keys[0])) {
          keys = [keys];
        }
        results = [];
        for (i = 0, len = keys.length; i < len; i++) {
          key = keys[i];
          results.push(this.setKey(key[0], key[1]));
        }
        return results;
      }

      nextMove() {
        boundMethodCheck(this, ref);
        if (this.get('play')) {
          this.trigger('action', 'moveDown');
        }
        return setTimeout(this.nextMove, this.attributes.delay);
      }

      /*
          nextShape: ->
              @action = []
              shape = @pool.shape.attributes
              Application.worker.postMessage
                  trigger: 'findPlace'
                  vars:
                      matrix: @pool.attributes.cells
                      shape: shape.shape
                      angle: shape.angle
                      shapeIndex: shape.index
                      x: shape.x
                      id: @id
      */
      init(keys) {
        return this.set('id', Application.genId('Controller'));
      }

      start() {
        var keys;
        if (typeof keys === "undefined" || keys === null) {
          keys = [[KEY.LEFT, ACTION.MOVE_LEFT], [KEY.RIGHT, ACTION.MOVE_RIGHT], [KEY.DOWN, ACTION.MOVE_DOWN], [KEY.UP, ACTION.ROTATE_RIGHT], [KEY.SPACE, ACTION.DROP], [KEY.P, ACTION.PAUSE], [KEY.ENTER, ACTION.GET_SCORE]];
        }
        this.setKeys(keys);
        return this.nextMove();
      }

    };

    User.prototype.defaults = {
      keys: {},
      delay: DROP_DELAY,
      play: false
    };

    User.prototype.pool = null;

    User.prototype.handler = {
      action: function(name, ...vars) {
        if ((this.attributes.play || name === ACTION.PAUSE) && (this.pool != null)) {
          return this.pool.trigger('action', name, vars);
        }
      }
    };

    /*
        setPath: (res)->
            @pool.shape.hint =
                x: res.x
                y: res.y
                angle: res.angle
    */
    User.prototype.poolHandler = {
      pause: function() {
        return this.set('play', !this.attributes.play);
      },
      start: function() {
        return this.set('play', true);
      },
      stop: function() {
        return this.set('play', false);
      }
    };

    return User;

  }).call(this);

  //#############################

  // AI controller

  //#############################
  ref1 = Application.Model.Controller.AI = (function() {
    class AI extends Backbone.Model {
      constructor() {
        super(...arguments);
        this.timer = this.timer.bind(this);
        this.nextAction = this.nextAction.bind(this);
      }

      timer() {
        boundMethodCheck(this, ref1);
        if (this.get('play')) {
          this.trigger('action', 'moveDown');
          return this.timeout = setTimeout(this.timer, this.attributes.delay);
        }
      }

      timerStop() {
        return clearTimeout(this.timeout);
      }

      nextAction() {
        var action, delay, delayShift;
        boundMethodCheck(this, ref1);
        if (this.attributes.play && this.action.length) {
          action = this.action.shift();
          this.trigger('action', action);
        }
        delayShift = this.attributes.actionDelay / 2;
        delay = rand(this.attributes.actionDelay - delayShift, this.attributes.actionDelay + delayShift);
        return setTimeout(this.nextAction, delay);
      }

      findPlace() {
        var shape;
        this.action = [];
        shape = this.pool.shape.attributes;
        return Application.worker.postMessage({
          trigger: 'findPlace',
          vars: {
            matrix: this.pool.attributes.cells,
            shape: shape.shape,
            angle: shape.angle,
            shapeIndex: shape.index,
            x: shape.x,
            id: this.id,
            formula: this.attributes.formula,
            smart: this.attributes.smart
          }
        });
      }

      init(params) {
        this.set('id', Application.genId('Controller'));
        return console.log(`FORMULA: ${this.attributes.formula}, SMART: ${this.attributes.smart}`);
      }

      start() {
        this.timer();
        return this.nextAction();
      }

    };

    AI.prototype.defaults = {
      delay: DROP_DELAY,
      actionDelay: 400,
      play: false,
      formula: 0,
      smart: 1
    };

    AI.prototype.pool = null;

    AI.prototype.action = [];

    AI.prototype.timeout = null;

    AI.prototype.handler = {
      action: function(name, ...vars) {
        if ((this.attributes.play || name === ACTION.PAUSE) && (this.pool != null)) {
          return this.pool.trigger('action', name, vars);
        }
      },
      setPath: function(result) {
        //_dump result
        return this.action = result.path;
      },
      'change:play': function() {
        if (this.get('play')) {
          return this.findPlace();
        }
      }
    };

    AI.prototype.poolHandler = {
      pause: function() {
        return this.set('play', !this.attributes.play);
      },
      start: function() {
        return this.set('play', true);
      },
      stop: function() {
        return this.set('play', false);
      },
      putShape: function() {
        return this.timerStop();
      },
      nextShape: function() {
        if (this.get('play')) {
          this.findPlace();
          return this.timer();
        }
      }
    };

    return AI;

  }).call(this);

}).call(this);

//# sourceMappingURL=controller.js.map
