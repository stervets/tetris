// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  Application.Collection.Controller = (function(_super) {
    __extends(Controller, _super);

    function Controller() {
      return Controller.__super__.constructor.apply(this, arguments);
    }

    return Controller;

  })(Backbone.Collection);


  /* User keyboard control */

  Application.Model.Controller.User = (function(_super) {
    __extends(User, _super);

    function User() {
      this.nextMove = __bind(this.nextMove, this);
      return User.__super__.constructor.apply(this, arguments);
    }

    User.prototype.defaults = {
      keys: {},
      delay: DROP_DELAY,
      play: false
    };

    User.prototype.pool = null;

    User.prototype.setKey = function(key, action) {
      Application.keyMapper(this, key, action);
      return this.attributes.keys[key] = action;
    };

    User.prototype.setKeys = function(keys) {
      var key, _i, _len, _results;
      if (!_.isArray(keys[0])) {
        keys = [keys];
      }
      _results = [];
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        key = keys[_i];
        _results.push(this.setKey(key[0], key[1]));
      }
      return _results;
    };

    User.prototype.nextMove = function() {
      if (this.get('play')) {
        this.trigger('action', 'moveDown');
      }
      return setTimeout(this.nextMove, this.attributes.delay);
    };

    User.prototype.handler = {
      action: function() {
        var name, vars;
        name = arguments[0], vars = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if ((this.attributes.play || name === ACTION.PAUSE) && (this.pool != null)) {
          return this.pool.trigger('action', name, vars);
        }
      },
      setPath: function(res) {
        return this.pool.shape.hint = {
          x: res.x,
          y: res.y,
          angle: res.angle
        };
      }
    };

    User.prototype.poolHandler = {
      pause: function() {
        return this.set('play', !this.attributes.play);
      },
      start: function() {
        return this.set('play', true);
      },
      stop: function() {
        return this.set('play', false);
      },
      nextShape: function() {
        var shape;
        this.action = [];
        shape = this.pool.shape.attributes;
        return Application.worker.postMessage({
          trigger: 'findPlace',
          vars: {
            matrix: this.pool.attributes.cells,
            shape: shape.shape,
            angle: shape.angle,
            shapeIndex: shape.index,
            x: shape.x,
            id: this.id
          }
        });
      }
    };

    User.prototype.init = function(keys) {
      this.set('id', Application.genId('Controller'));
      if (keys == null) {
        keys = [[KEY.LEFT, ACTION.MOVE_LEFT], [KEY.RIGHT, ACTION.MOVE_RIGHT], [KEY.DOWN, ACTION.MOVE_DOWN], [KEY.UP, ACTION.ROTATE_RIGHT], [KEY.SPACE, ACTION.DROP], [KEY.P, ACTION.PAUSE], [KEY.ENTER, ACTION.GET_SCORE]];
      }
      this.setKeys(keys);
      return this.nextMove();
    };

    return User;

  })(Backbone.Model);

  Application.Model.Controller.AI = (function(_super) {
    __extends(AI, _super);

    function AI() {
      this.nextAction = __bind(this.nextAction, this);
      this.timer = __bind(this.timer, this);
      return AI.__super__.constructor.apply(this, arguments);
    }

    AI.prototype.defaults = {
      delay: DROP_DELAY,
      actionDelay: 300,
      play: false,
      formula: 0
    };

    AI.prototype.pool = null;

    AI.prototype.action = [];

    AI.prototype.timeout = null;

    AI.prototype.timer = function() {
      if (this.get('play')) {
        this.trigger('action', 'moveDown');
        return this.timeout = setTimeout(this.timer, this.attributes.delay);
      }
    };

    AI.prototype.timerStop = function() {
      return clearTimeout(this.timeout);
    };

    AI.prototype.nextAction = function() {
      var action, delayShift;
      if (this.attributes.play && this.action.length) {
        action = this.action.shift();
        this.trigger('action', action);
      }
      delayShift = this.attributes.actionDelay / 2;
      return setTimeout(this.nextAction, rand(this.attributes.actionDelay - delayShift, this.attributes.actionDelay + delayShift));
    };

    AI.prototype.findPlace = function() {
      var shape;
      this.action = [];
      shape = this.pool.shape.attributes;
      return Application.worker.postMessage({
        trigger: 'findPlace',
        vars: {
          matrix: this.pool.attributes.cells,
          shape: shape.shape,
          angle: shape.angle,
          shapeIndex: shape.index,
          x: shape.x,
          id: this.id,
          formula: this.attributes.formula
        }
      });
    };

    AI.prototype.handler = {
      action: function() {
        var name, vars;
        name = arguments[0], vars = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if ((this.attributes.play || name === ACTION.PAUSE) && (this.pool != null)) {
          return this.pool.trigger('action', name, vars);
        }
      },
      setPath: function(result) {
        return this.action = result.path;
      },
      'change:play': function() {
        if (this.get('play')) {
          return this.findPlace();
        }
      }
    };

    AI.prototype.poolHandler = {
      pause: function() {
        return this.set('play', !this.attributes.play);
      },
      start: function() {
        return this.set('play', true);
      },
      stop: function() {
        return this.set('play', false);
      },
      putShape: function() {
        return this.timerStop();
      },
      nextShape: function() {
        if (this.get('play')) {
          this.findPlace();
          return this.timer();
        }
      }
    };

    AI.prototype.init = function() {
      this.set('id', Application.genId('Controller'));
      console.log("FORMULA: " + this.attributes.formula);
      this.timer();
      return this.nextAction();
    };

    return AI;

  })(Backbone.Model);


  /*
  
      OLD AI wiout delay control
   */

  Application.Model.Controller.AI_OLD = (function(_super) {
    __extends(AI_OLD, _super);

    function AI_OLD() {
      this.nextAction = __bind(this.nextAction, this);
      this.nextMove = __bind(this.nextMove, this);
      return AI_OLD.__super__.constructor.apply(this, arguments);
    }

    AI_OLD.prototype.defaults = {
      delay: DROP_DELAY,
      actionDelay: 150,
      play: false
    };

    AI_OLD.prototype.pool = null;

    AI_OLD.prototype.action = [];

    AI_OLD.prototype.nextMove = function() {
      _dump(this.get('play'));
      if (this.get('play')) {
        this.trigger('action', 'moveDown');
      }
      return setTimeout(this.nextMove, this.attributes.delay);
    };

    AI_OLD.prototype.nextAction = function() {
      var action;
      if (this.attributes.play && this.action.length) {
        action = this.action.shift();
        this.trigger('action', action);
      }
      return setTimeout(this.nextAction, rand(this.attributes.actionDelay, this.attributes.actionDelay));
    };

    AI_OLD.prototype.findPlace = function() {
      var shape;
      this.action = [];
      shape = this.pool.shape.attributes;
      return Application.worker.postMessage({
        trigger: 'findPlace',
        vars: {
          matrix: this.pool.attributes.cells,
          shape: shape.shape,
          angle: shape.angle,
          shapeIndex: shape.index,
          x: shape.x,
          id: this.id
        }
      });
    };

    AI_OLD.prototype.handler = {
      action: function() {
        var name, vars;
        name = arguments[0], vars = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if ((this.attributes.play || name === ACTION.PAUSE) && (this.pool != null)) {
          return this.pool.trigger('action', name, vars);
        }
      },
      setPath: function(result) {
        return this.action = result.path;
      },
      'change:play': function() {
        if (this.get('play')) {
          return this.findPlace();
        }
      }
    };

    AI_OLD.prototype.poolHandler = {
      pause: function() {
        return this.set('play', !this.attributes.play);
      },
      start: function() {
        return this.set('play', true);
      },
      stop: function() {
        return this.set('play', false);
      },
      nextShape: function() {
        if (this.get('play')) {
          return this.findPlace();
        }
      }
    };

    AI_OLD.prototype.init = function() {
      this.set('id', Application.genId('Controller'));
      this.nextMove();
      return this.nextAction();
    };

    return AI_OLD;

  })(Backbone.Model);

}).call(this);

//# sourceMappingURL=controller.map
