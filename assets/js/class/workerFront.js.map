{
  "version": 3,
  "file": "workerFront.js",
  "sourceRoot": "/",
  "sources": [
    "workerFront.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "Application.workerCallback =\n    dump: (vars)->\n        _dump(vars...)\n        #console.log vars...\n\n    mat: (vars)->\n        _mat(vars.matrix, vars.id)\n\n\n    checkMoveDown: (vars)->\n        if (pool = Application.Pool.get(vars.id))# and vars.key==pool.shape.key\n            if vars.collided\n                pool.trigger 'action', 'putShape'\n            else\n                pool.trigger 'action', 'doMoveDown'\n\n    checkMoveLeft: (vars)->\n        if pool = Application.Pool.get(vars.id)\n            pool.trigger 'action', 'doMoveLeft' if !vars.collided\n\n    checkMoveRight: (vars)->\n        if pool = Application.Pool.get(vars.id)\n            pool.trigger 'action', 'doMoveRight' if !vars.collided\n\n    checkRotateLeft: (vars)->\n        if pool = Application.Pool.get(vars.id)\n            if !vars.collided\n                pool.setShapeXY vars.x, vars.y\n                pool.trigger 'action', 'doRotateLeft'\n\n    checkRotateRight: (vars)->\n        if pool = Application.Pool.get(vars.id)\n            if !vars.collided\n                pool.setShapeXY vars.x, vars.y\n                pool.trigger 'action', 'doRotateRight'\n\n    checkDrop: (vars)->\n        if pool = Application.Pool.get(vars.id)\n            pool.shape.set('drop', vars.drop)\n            if vars.setDrop\n                pool.shape.set('y', vars.drop)\n                pool.trigger 'action', 'putShape'\n\n    putShape: (vars)->\n\n        if pool = Application.Pool.get(vars.id)\n            pool.attributes.cells = vars.result.matrix\n            pool.trigger 'action', if vars.result.overflow then 'overflow' else 'onPutShape'\n\n    process: (vars)->\n        if pool = Application.Pool.get(vars.id)\n            pool.attributes.cells = vars.matrix\n            pool.trigger 'action', 'postProcess', vars.lines\n        ###\n        if pool = Application.Pool.get(vars.id)\n            pool.attributes.cells = vars.matrix\n            if vars.lines.length\n                pool.score+=Math.floor(vars.lines.length*vars.lines.length)*(++pool.combo)\n                pool.trigger 'action', 'lines', [vars.lines, pool.score, pool.combo]\n            else\n                pool.combo = 0\n\n            pool.trigger 'action', 'nextShape'\n            pool.locked = false\n        ###\n    postProcess: (vars)->\n        if pool = Application.Pool.get(vars.id)\n            pool.attributes.cells = vars.result.matrix\n            pool.trigger 'spell', index, spell for index, spell of vars.result.spell\n            pool.spell = {}\n            pool.trigger 'action', 'nextShape'\n            pool.locked = false\n\n    findPlace: (vars)->\n        if controller = Application.Controller.get(vars.id)\n            controller.trigger 'setPath', vars.result\n\n    getScore: (vars)->\n\n\nApplication.worker = new Worker('/assets/js/class/workerBack.js')\nApplication.worker.addEventListener 'message',\n                                    (e)->\n                                        Application.workerCallback[e.data.callback](e.data.vars, e.data.callback) if Application.workerCallback[e.data.callback]?\n                                    , false\n"
  ]
}