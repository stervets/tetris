{
  "version": 3,
  "file": "workerBack.js",
  "sourceRoot": "/",
  "sources": [
    "workerBack.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "###\n * worker.postMessage({\n *  method : {methodName}\n *  vars : {vars}\n *  callback: {callbackFunction}\n * })\n\n\n    function rand(min, max) {\n    if(max == undefined) {\n        max = min;\n        min = 0;\n    }\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n###\nimportScripts '/assets/js/lib/underscore-min.js', '/assets/js/class/const.js'\n\nrand = (min,max)->\n    [min, max] = [0, min] if not max?\n    Math.floor(Math.random() * (max - min + 1)) + min\n\nworker = self\n\n_dump = (vars...)->\n    worker.postMessage\n        callback: 'dump'\n        vars: vars\n\n_mat = (matrix, id)->\n    worker.postMessage\n        callback: 'mat'\n        vars:\n            matrix: matrix\n            id: id\n\nmatrixCopy = (source)->\n    matrix = []\n    matrix.push(line[..]) for line in source\n    matrix\n\n\ncollide = (matrix, shape, posX, posY)->\n    width = matrix[0].length\n    height = matrix.length\n\n    for line, i in shape\n        y = i+posY\n        for val, j in line\n            x = j+posX\n            return true if val and (y>=height or x<0 or x>=width or (y>=0 and matrix[y][x]))\n\n    return false\n\nputShape = (matrix, shape, posX, posY)->\n    width = matrix[0].length\n    height = matrix.length\n    overflow = false\n\n    for line, i in shape\n        y = i+posY\n        continue if y >= height\n        if y < 0\n            overflow = true if not overflow and isInLine(line)\n            continue\n\n        for val, j in line\n            x = j+posX\n            matrix[y][x] = val if val and x >= 0 and x < width\n\n    return {\n        matrix: matrix\n        overflow: overflow\n    }\n\nisInLine = (line)->\n    for i in line\n        return true if i\n    return false\n\nisFullLine = (line)->\n    return false for i in line when not i\n    return true\n\n\nisInVert = (source, col)->\n    for line in source\n        return true if line[col]\n    return false\n\n\ntrim = (source)->\n    result =\n        minX: -1\n        maxX: 0\n        minY: -1\n        maxY: 0\n        matrix: []\n        fullLine: -1\n\n    for i in [0...source.length]\n        if isInVert(source, i)\n            result.maxX = i\n            result.minX = i if result.minX < 0\n        else\n            break if result.minX>0\n\n    for line, i in source\n        if isInLine(line)\n            trimLine = line[result.minX..result.maxX]\n            result.maxY = i\n            result.minY = i if result.minY < 0\n            result.fullLine = result.matrix.length if result.fullLine<0 and isFullLine(trimLine)\n            result.matrix.push(trimLine)\n\n    result.minX = 0 if result.minX<0\n    result.minY = 0 if result.minY<0\n    result.shiftX = source.length - (result.maxX - result.minX) - 1\n    result.shiftY = source.length - (result.maxY - result.minY) - 1\n    result.width = result.matrix[0].length\n    result.height = result.matrix.length\n    result.fullLine = result.height-1 if result.fullLine<0\n\n    result\n\ngetDrop = (matrix, shape, x, y)->\n    y++ until collide matrix, shape, x, y\n    y-1\n\ngetFullLines = (matrix, shape, posX, posY)->\n    width = matrix[0].length\n    height = shape.length\n    lines = []\n    for y in [0...height]\n        yy = y + posY\n        continue if yy<0 or yy>=matrix.length\n        full = true\n        for x in [0...width]\n            if not matrix[yy][x] and not shape[y][x-posX]\n                full = false\n                break\n        lines.push yy if full\n    lines\n\ngetPercent = (part, all)-> Math.round((part*100)/all)\n\ngetFillness = (matrix, shape, posX, posY, fullLine)->\n    shapeWidth = shape[0].length\n    shapeHeight = shape.length\n    matrixWidth = matrix[0].length\n    matrixHeight = matrix.length\n\n    all = 0\n    filled = 0\n    holes = 0\n\n    for y in [-1..shapeHeight] # Влияет на holes !!!\n        yy = y + posY\n        continue if not (0<=yy<matrixHeight)\n        inShapeV = 0<=y<shapeHeight\n        for x in [-1..shapeWidth]\n            xx = x + posX\n            continue if not (0<=xx<matrixWidth)\n            inShapeH = 0<=x<shapeWidth\n            all++\n            if matrix[yy][xx] or (inShapeV and inShapeH and shape[y][x])\n                filled++\n            else\n                holes++ if inShapeH and y>=fullLine\n\n    return {\n        percent: getPercent(filled, all)\n        holes: 100-getPercent(holes, all)\n    }\n\n\nscoreFormula = [\n    # Склонен строить башни\n    (height, fillness, holes, lines)-> height+fillness+holes*4+lines\n    # Сбалансирован, но не любит линии.\n    (height, fillness, holes, lines)-> height*2+fillness+holes*4+lines\n    # Слишком любит линии - looser\n    (height, fillness, holes, lines)-> height*2+fillness+holes*4+lines*2\n    # любит линии!!!\n    (height, fillness, holes, lines)-> height*2+fillness*2+holes*2+lines\n\n    # II лига\n    (height, fillness, holes, lines)-> (height+1)*(holes+1)+(fillness+1)*(lines+1) #4\n\n\n    #увеличить fillness\n    (height, fillness, holes, lines)-> ((height+1)*(holes+1))+(fillness*2+1)*(lines+1) #5\n\n    (height, fillness, holes, lines)-> (height+1)/((100-holes+1)) + (lines+1) * 10 + fillness #6 RULES\n\n    # очков меньше, но стабилен жеж. Выиграл у восьмого, набрав 3050\n    (height, fillness, holes, lines)-> (height+1)/((100-holes+1)) + (lines+1) * 2 + (fillness+1)*2  #7 nu leader. Абсолютно круче всех.\n\n    #мегакрут. Проиграл седьмому на 3485 очках\n    (height, fillness, holes, lines)-> (height+1)/((100-holes+1)) + (lines+1) + (fillness)*2  #8 слабее 7ки\n    #(height, fillness, holes, lines)-> height/((100-holes+1)/2) + lines * 10 + fillness\n\n    (height, fillness, holes, lines)-> (fillness)/((100-holes+1)) + (lines) + height #9\n\n    (height, fillness, holes, lines)-> ((height+1))/((100-holes+1)) + (lines+1) + (fillness) #10 наследник восьмого\n\n    (height, fillness, holes, lines)-> (((height+1))/((100-holes+1)) + (lines+1) + (fillness))*(if height>50 then 10 else 1) #11 наследник восьмого\n\n\n    (height, fillness, holes, lines)-> ((height+1)/((100-holes+1)) + (lines+1) + (fillness)*2)*height  #12 На синтетике намного лучше чем 8\n\n    # очков меньше, но стабилен жеж. Выиграл у восьмого, набрав 3050\n    (height, fillness, holes, lines)-> (fillness+1)/((100-holes+1)) + (lines+1)+(height+1)*2  #13 играет опаснее 7ки, но эффективнее по очкам\n\n    (height, fillness, holes, lines)-> ((height+1))/((100-holes+1)) + (lines+1) * 2 + (fillness+1)*3  #14 уделал семерку и по очкам тоже. Единственный конкурент семерке.\n    (height, fillness, holes, lines)-> ((height+1)*2)/((100-holes+1)) + (lines+1) * 2 + (fillness+1)*3  #15 проигрывает семерке, но мне нравится его стиль.\n\n    #(height, fillness, holes, lines)-> height/holes + lines * 10 + fillness # new favorite! 6\n]\n\nspells = [\n    (matrix, value)->\n        matrix[index-value] = line[..] for line, index in matrix when index>value-1\n        len = matrix[0].length-1\n        empty = rand(0, len)\n        lines = []\n\n        for y in [matrix.length-value...matrix.length]\n            line = []\n            for x in [0..len]\n                line.push if x is empty then 0 else SHAPE_SPECIAL+SPELL.GROUND\n            lines.push(matrix[y] = line)\n\n        {\n            matrix: matrix\n            spell: lines\n        }\n\n]\n\ngetScore = (matrix, shape, posX, posY, formula)->\n    if not formula?\n        console.log 'Warning getScore formula is not set. Setted to 0'\n        formula = 0\n\n    trimShape = trim(shape)\n    x = posX+trimShape.minX\n    y = posY+trimShape.minY\n    matrixHeight = matrix.length\n\n    fill = getFillness(matrix, trimShape.matrix, x, y, trimShape.fullLine)\n    score =\n        height: getPercent(y, matrixHeight)\n    #    width: getPercent(Math.abs(matrixWidth/2-posX), matrixWidth/2)+1\n        fillness: fill.percent\n        holes: fill.holes\n        lines: getPercent(getFullLines(matrix, shape, posX, posY).length, 4)\n\n    #getPercent = (part, all)-> Math.round((part*100)/all)\n\n    #console.log score.lines\n    score.score = Math.round(scoreFormula[formula](score.height, score.fillness, score.holes, score.lines))\n    score\n\n\ngetPath = (x1, x2, angle1, angle2)->\n    result = []\n    for angle in [angle1...angle2]\n        result.push if angle1<angle2 then 'rotateRight' else 'rotateLeft'\n\n    for x in [x1...x2]\n        result.push if x1<x2 then 'moveRight' else 'moveLeft'\n    result\n\ntriggers =\n    checkMoveDown: (vars)->\n        worker.postMessage\n            callback: 'checkMoveDown',\n            vars:\n                collided: collide vars.matrix, vars.shape, vars.x, vars.y + 1\n                id: vars.id\n                #key: vars.key\n\n    checkMoveLeft: (vars)->\n        worker.postMessage\n            callback: 'checkMoveLeft',\n            vars:\n                collided: collide vars.matrix, vars.shape, vars.x-1, vars.y\n                id: vars.id\n\n    checkMoveRight: (vars)->\n        worker.postMessage\n            callback: 'checkMoveRight',\n            vars:\n                collided: collide vars.matrix, vars.shape, vars.x+1, vars.y\n                id: vars.id\n\n    checkRotate: (vars, callback)->\n        offsetX = 0\n        if collided = collide vars.matrix, vars.shape, vars.x, vars.y\n            halfSize = Math.floor vars.shape[0].length/2\n            for offset in [1..halfSize]\n                if not collide vars.matrix, vars.shape, vars.x+offset, vars.y\n                    collided = false\n                    offsetX = offset\n                    break\n                if not collide vars.matrix, vars.shape, vars.x-offset, vars.y\n                    collided = false\n                    offsetX = -offset\n                    break\n\n        worker.postMessage\n            callback: callback,\n            vars:\n                collided: collided\n                x: vars.x+offsetX\n                y: vars.y\n                id: vars.id\n\n    checkRotateLeft: (vars)->\n        triggers.checkRotate vars, 'checkRotateLeft'\n\n    checkRotateRight: (vars)->\n        triggers.checkRotate vars, 'checkRotateRight'\n\n\n    checkDrop: (vars, setDrop=false)->\n        #vars.y++ until collide vars.matrix, vars.shape, vars.x, vars.y\n        worker.postMessage\n            callback: 'checkDrop',\n            vars:\n                drop: getDrop vars.matrix, vars.shape, vars.x, vars.y\n                setDrop: setDrop\n                id: vars.id\n\n    setDrop: (vars)->\n        triggers['checkDrop'](vars, true)\n\n    putShape: (vars)->\n        worker.postMessage\n            callback: 'putShape',\n            vars:\n                result: putShape matrixCopy(vars.matrix), vars.shape, vars.x, vars.y\n                id: vars.id\n\n    process: (vars)->\n        matrix = []\n        emptyLine = (0 for _dummy in [0...vars.matrix[0].length])\n        lines = []\n\n        for line, y in vars.matrix\n            if isFullLine(line)\n                matrix.unshift(emptyLine)\n                lines.push y\n            else\n                matrix.push(line)\n\n        worker.postMessage\n            callback: 'process',\n            vars:\n                matrix: matrix\n                lines: lines\n                id: vars.id\n\n    findPlace: (vars)->\n        #formula = if vars.formula? and scoreFormula[vars.formula]? then vars.formula else 0\n        vars.smart = 100 if not vars.smart?\n        formula = vars.formula\n        matrix = vars.matrix\n        matrixWidth = matrix[0].length\n        shapeWidth = vars.shape[0].length\n\n        x = vars.x\n        y = -vars.shape.length+1\n\n        scores = {}\n        max = 0\n\n        maxAngle = SHAPE_ANGLES[vars.shapeIndex] || 4\n\n        for xx in [-shapeWidth...matrixWidth]\n            for angle in [0...maxAngle]\n                shape = vars.shape[angle]\n                continue if (droppedY = getDrop(matrix, shape, xx, y))<=0\n                score = getScore(matrix,shape,xx,droppedY,formula).score\n                if not scores[score]?\n                    scores[score] =\n                        score: score\n                        x: xx\n                        y: droppedY\n                        angle: angle\n\n                max = score if max < score\n\n\n        #scores.push(max.key)\n        keys = Object.keys(scores)\n        len = keys.length\n        rnd = -1\n        if len>1\n            rnd = rand(1, 100)\n            key = keys[len-(if rnd<vars.smart then 1 else 2)]\n\n        else\n            key = keys[0]\n\n        #_dump rnd, (if rnd<vars.smart then 'win' else 'fail'), (keys[len-(if rnd<vars.smart then 1 else 2)]+' of '+keys[len-1])\n        #rnd = rand(Math.round(keys.length*vars.smart), keys.length)-1\n        #key = keys[rnd]\n\n        #break for key in [Math.round(max*vars.smart)..max] when scores[key]?\n        #_dump key, scores\n        #_dump 'MIN: '+Math.round(keys.length*vars.smart-1)+' of '+(keys.length-1), 'Selected: '+rnd, keys\n        result = if scores[key]\n                    score = scores[key]\n                    score.path = getPath(x, score.x, vars.angle, score.angle)\n                    score\n                else\n                    path:[]\n                    score: -1\n                    x:x\n                    y:-10\n                    angle: vars.angle\n\n        result.path = result.path.concat('drop')\n        #_dump result\n        worker.postMessage\n            callback: 'findPlace',\n            vars:\n                result: result\n                id: vars.id\n\n    getScore: (vars)->\n        droppedY = getDrop(vars.matrix, vars.shape, vars.x, vars.y)\n        res = getScore(vars.matrix,vars.shape,vars.x,droppedY)\n        worker.postMessage\n            callback: 'getScore',\n            vars:\n                result: res\n                id: vars.id\n\n    postProcess: (vars)->\n        result =\n            matrix: vars.matrix\n            spell: {}\n\n        for spell, value of vars.spell when value\n            #console.log spell+' '+value\n            res = spells[spell](result.matrix, value)\n            result.matrix = res.matrix\n            result.spell[spell] = res.spell\n\n        worker.postMessage\n            callback: 'postProcess',\n            vars:\n                id: vars.id\n                result: result\n\nworker.addEventListener 'message',\n    (e)->\n        data = e.data;\n        triggers[data.trigger](data.vars, data.callback) if triggers[data.trigger]?\n    , false\n"
  ]
}