{
  "version": 3,
  "file": "index.js",
  "sourceRoot": "/",
  "sources": [
    "index.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "Application.shapes = []\nApplication.Model.Controller = {}\n\nApplication.matrixEmpty = (width, height, val = 0)->\n    line = (val for _dummy in [0...width])\n    matrix = []\n    matrix.push(line[..]) for _dummy in [0...height]\n    matrix\n\nApplication.lineCopy = (source, value)->\n    line = []\n    if value?\n        line.push(if val then value else 0) for val in source\n    else\n        line = source[..]\n    line\n\nApplication.matrixCopy = (source, value)->\n    matrix = []\n    matrix.push(if value? then Application.lineCopy(line, value) else line[..]) for line in source\n    matrix\n\n### Generate rotated shapes and align ###\nApplication.initShapes = ->\n    matrixRot90 = (source)->\n        matrix = Application.matrixCopy(source)\n        len = matrix.length - 1\n        for row, i in source\n            for cell, j in row\n                matrix[j][len - i] = source[i][j]\n        matrix\n\n    getShapeMatrix = (shape)->\n        shapeWidth = shape[0].length\n        lineStart = Math.floor(shapeWidth / 2 - shape.length / 2)\n        matrix = []\n        for line in [0...shapeWidth]\n            matrix.push(if line >= lineStart and line - lineStart < shape.length then shape[line - lineStart] else (0 for _dummy in [0...shapeWidth]))\n        matrix\n\n    for shape, num in SHAPES\n        matrix = Application.shapes[num] = []\n        matrix[0] = getShapeMatrix(shape)\n        matrix[1] = matrixRot90(matrix[0])\n        matrix[2] = matrixRot90(matrix[1])\n        matrix[3] = matrixRot90(matrix[2])\n\nApplication.shapesView = []\nApplication.initShapesView = ->\n    for shapes, index in Application.shapes\n        Application.shapesView.push []\n        for shape in shapes\n            $shape = $(Application.Templates.tplShape()).css\n                width: shape.length * POOL.CELL_SIZE\n                height: shape.length * POOL.CELL_SIZE\n\n            for line, y in shape\n                for val, x in line when val\n                    $shape.append Application.Templates.tplCell\n                                      top: y * POOL.CELL_SIZE\n                                      left: x * POOL.CELL_SIZE\n                                      index: index + 1\n            Application.shapesView[index].push $shape[0].outerHTML\n\n### Main shapes stack ###\nclass Application.Model.ShapeStack extends Backbone.Model\n    defaults:\n        shapes: []\n\n    reset: ->\n        @set 'shapes', []\n\n    getShape: (index)->\n        len = index - @attributes.shapes.length + 2\n        @generateShapes(len) if len > 0\n\n        {\n        index: @attributes.shapes[index][0]\n        angle: @attributes.shapes[index][1]\n        }\n\n    generateShapes: (num)->\n        for i in [0...num]\n            shape = rand(SHAPES.length - 1)\n            #shape = 1\n\n            maxAngle = SHAPE_ANGLES[shape] || 4\n            @attributes.shapes.push([shape, rand(maxAngle - 1)])\n    #@attributes.shapes.push([rand(0,4), rand(maxAngle-1)]) for i in [0...num]\n    #@attributes.shapes.push([4, 0]) for i in [0...num]\n\n    init: ()->\n        @generateShapes(250)\n        return;\n        key = 'shapes'\n        if data = window.localStorage.getItem(key)\n            @attributes.shapes = JSON.parse(data)\n        else\n            @generateShapes(350)\n            window.localStorage.setItem(key, JSON.stringify(@attributes.shapes))\n\n### Shape model ###\nclass Application.Model.Shape extends Backbone.Model\n    defaults:\n        index: 1000000\n        angle: 0\n        x: 0\n        y: 0\n        drop: -1\n        shape: null\n        size: 0\n\n    setShape: (index, angle = 0)->\n        size = Application.shapes[index][0].length\n        @set\n            index: index\n            shape: Application.shapes[index]\n            size: size\n            angle: angle\n            x: Math.floor(POOL.WIDTH / 2 - size / 2)\n            y: -size\n        @trigger('setShape')\n\n# Application keymap\nApplication.keyMap = {}\n\n# Key Mapper\nApplication.keyMapper = (controller, key, action)->\n    Application.keyMap[key] =\n        controller: controller\n        action: action\n\n### Hook keys ###\nApplication.hook = ->\n    $(window).focus ->\n        $(document).focus()\n\n    $(document).keydown (e)->\n        map = Application.keyMap[e.keyCode]\n        if map?\n            map.controller.trigger 'action', map.action\n            e.preventDefault()\n\n###\nApplication.switchView = (viewName)->\n    view.trigger('hide') for name, view of Application.GameView when viewName isnt name\n    Application.GameView[viewName].trigger('showDelay')\n###\n\nApplication.switchView = (viewName)->\n    view.trigger('hide') for name, view of Application.GameView when viewName isnt name\n    Application.GameView[viewName].trigger('showDelay')\n\n# Create menu collection\nApplication.createMenu = (menuTitle, menuItems, context)->\n    menu = new Application.Collection.Menu()\n    menu.setTitle menuTitle\n    menuView = new Application.View.Menu\n        collection:\n            Menu: menu\n\n    context = menu if not context?\n    #_dump(menuView.$el[0].outerHTML)\n\n    #$menuNode = menuView.$('.jsMenuItems')\n    for title, trigger of menuItems\n        menuItem = new Application.Model.MenuItem\n            title: title\n            triggerHandler: trigger\n            context: context\n        menu.add menuItem\n\n    {\n    collection: menu\n    view: menuView\n    }\n\n#Application.particle = (params)->\n\n#<span class=\"glyphicon glyphicon-star\"></span>\n\nApplication.clearCollection = (collection)->\n    while collection.length > 0\n        model = collection.at 0\n        collection.remove model\n        model.trigger('destroy')\n\n### Start application ###\nApplication.onStart ->\n    $('head').append Application.Templates.tplStyle\n                         POOL: POOL\n                         poolWidth: POOL.WIDTH * POOL.CELL_SIZE\n                         poolHeight: POOL.HEIGHT * POOL.CELL_SIZE\n\n    Application.initShapes();\n    Application.initShapesView();\n\n    Application.shapeStack = new Application.Model.ShapeStack()\n    Application.Pool = new Application.Collection.Pool()\n    Application.Controller = new Application.Collection.Controller()\n\n    Application.GameView = {}\n\n    Application.Lobby = new Application.Model.Lobby()\n    Application.GameView.Lobby = new Application.View.Lobby\n        model: Application.Lobby\n\n    Application.Game = new Application.Model.Game()\n    Application.GameMainView = new Application.View.Game\n        model: Application.Game\n\n    Application.hook()\n    #Application.Game.switch GAME_MODE.SINGLE_PLAYER\n    Application.Game.switch GAME_MODE.LOBBY\n###\nrep = ->\n    _dump (Application.Pool.at(0).spell[SPELL.GROUND] if Application.Pool.at(0))\n          , (Application.Pool.at(1).spell[SPELL.GROUND] if Application.Pool.at(1))\n    setTimeout(rep, 100)\nrep()\n###\n###\n$('body').click ->\n    if pool = Application.Pool.at(0)\n        pool.setSpell(SPELL.GROUND, 2)\n###\n###\nparticle = new Application.Particle\n    x: 100\n    y: 100\n\n$('body').append particle.$el\n\n$('body').click ->\n    for i in [0...10]\n        x = i*20\n        particle.launch(x, 0, 1, x+(i-10/2)*POOL.CELL_SIZE)\n    particle.message('Combo x2', 1)\n###\n\n"
  ]
}